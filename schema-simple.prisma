// Schema Simplificado para Teste - SQLite
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                    Int                     @id @default(autoincrement())
  name                  String
  email                 String                  @unique
  password              String
  themePreference       String                  @default("SYSTEM")
  biometricEnabled      Boolean                 @default(false)
  pinCode               String?
  notificationSettings  String                  @default("{\"budget_alerts\":true,\"bill_reminders\":true,\"transaction_confirmations\":true}")
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt

  walletGroups          WalletGroup[]
  paymentMethods        PaymentMethod[]
  categories            Category[]
  transactions          Transaction[]
  installments          Installment[]
  budgets               Budget[]
  bankConnections       BankConnection[]
  notifications         Notification[]
  userSettings          UserSettings[]
}

model WalletGroup {
  id                    Int                     @id @default(autoincrement())
  name                  String
  type                  String
  description           String?
  color                 String                  @default("#4CAF50")
  icon                  String                  @default("wallet")
  isActive              Boolean                 @default(true)
  hasIntegratedPix      Boolean                 @default(false)
  hasWalletBalance      Boolean                 @default(false)
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  userId                Int

  user                  User                    @relation(fields: [userId], references: [id])
  paymentMethods        PaymentMethod[]
}

model PaymentMethod {
  id                    Int                     @id @default(autoincrement())
  name                  String
  type                  String
  currentBalance        Float                   @default(0)
  creditLimit           Float?
  closingDay            Int?
  dueDay                Int?
  availableLimit        Float?
  accountNumber         String?
  agency                String?
  bankCode              String?
  isActive              Boolean                 @default(true)
  isPrimary             Boolean                 @default(false)
  color                 String                  @default("#4CAF50")
  icon                  String                  @default("credit-card")
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  userId                Int
  walletGroupId         Int?

  user                  User                    @relation(fields: [userId], references: [id])
  walletGroup           WalletGroup?            @relation(fields: [walletGroupId], references: [id])
  transactions          Transaction[]
  installments          Installment[]
  creditCardBills       CreditCardBill[]
}

model CreditCardBill {
  id                    Int                     @id @default(autoincrement())
  paymentMethodId       Int
  referenceMonth        Int
  referenceYear         Int
  closingDate           DateTime
  dueDate               DateTime
  totalAmount           Float                   @default(0)
  paidAmount            Float                   @default(0)
  remainingAmount       Float                   @default(0)
  status                String                  @default("OPEN")
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt

  paymentMethod         PaymentMethod           @relation(fields: [paymentMethodId], references: [id])
  transactions          Transaction[]

  @@unique([paymentMethodId, referenceMonth, referenceYear])
}

model Category {
  id                    Int                     @id @default(autoincrement())
  name                  String
  type                  String
  description           String?
  color                 String                  @default("#4CAF50")
  icon                  String                  @default("category")
  monthlyBudget         Float?
  parentCategoryId      Int?
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  userId                Int

  parentCategory        Category?               @relation("CategoryHierarchy", fields: [parentCategoryId], references: [id])
  subcategories         Category[]              @relation("CategoryHierarchy")
  user                  User                    @relation(fields: [userId], references: [id])
  transactions          Transaction[]
  installments          Installment[]
  budgets               Budget[]
}

model Transaction {
  id                    Int                     @id @default(autoincrement())
  description           String
  amount                Float
  date                  DateTime
  type                  String
  paymentMethodId       Int
  categoryId            Int
  subcategoryId         Int?
  creditCardBillId      Int?
  installmentId         Int?
  installmentNumber     Int?
  transferToMethodId    Int?
  notes                 String?
  tags                  String?
  isRecurring           Boolean                 @default(false)
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  userId                Int

  paymentMethod         PaymentMethod           @relation(fields: [paymentMethodId], references: [id])
  category              Category                @relation(fields: [categoryId], references: [id])
  creditCardBill        CreditCardBill?         @relation(fields: [creditCardBillId], references: [id])
  installment           Installment?            @relation(fields: [installmentId], references: [id])
  user                  User                    @relation(fields: [userId], references: [id])
}

model Installment {
  id                    Int                     @id @default(autoincrement())
  description           String
  totalAmount           Float
  installmentCount      Int
  currentInstallment    Int                     @default(0)
  paymentMethodId       Int
  categoryId            Int
  subcategoryId         Int?
  startDate             DateTime
  installmentType       String                  @default("FIXED")
  notes                 String?
  tags                  String?
  isActive              Boolean                 @default(true)
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  userId                Int

  paymentMethod         PaymentMethod           @relation(fields: [paymentMethodId], references: [id])
  category              Category                @relation(fields: [categoryId], references: [id])
  user                  User                    @relation(fields: [userId], references: [id])
  transactions          Transaction[]
}

model BankConnection {
  id                    Int                     @id @default(autoincrement())
  bankCode              String
  bankName              String
  accessToken           String
  refreshToken          String?
  userId                Int
  isActive              Boolean                 @default(true)
  lastSync              DateTime                @default(now())

  user                  User                    @relation(fields: [userId], references: [id])
}

model Budget {
  id                    Int                     @id @default(autoincrement())
  categoryId            Int
  subcategoryId         Int?
  monthlyLimit          Float
  currentSpent          Float
  month                 Int
  year                  Int
  userId                Int

  category              Category                @relation(fields: [categoryId], references: [id])
  user                  User                    @relation(fields: [userId], references: [id])
}

model Notification {
  id                    Int                     @id @default(autoincrement())
  type                  String
  title                 String
  message               String
  isRead                Boolean                 @default(false)
  scheduledDate         DateTime?
  userId                Int

  user                  User                    @relation(fields: [userId], references: [id])
}

model UserSettings {
  id                    Int                     @id @default(autoincrement())
  userId                Int                     @unique
  currency              String                  @default("BRL")
  dateFormat            String                  @default("DD/MM/YYYY")
  language              String                  @default("pt-BR")
  timezone              String                  @default("America/Sao_Paulo")
  allowNegativeBalance  Boolean                 @default(true)
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt

  user                  User                    @relation(fields: [userId], references: [id])
}
