import { PrismaService } from '../prisma/prisma.service';
import { CreateTransactionDto } from './dto/create-transaction.dto';
import { UpdateTransactionDto } from './dto/update-transaction.dto';
export declare class TransactionsService {
    private prisma;
    constructor(prisma: PrismaService);
    create(userId: number, createTransactionDto: CreateTransactionDto): Promise<{
        id: number;
        createdAt: Date;
        updatedAt: Date;
        type: import("@prisma/client").$Enums.TransactionType;
        description: string;
        amount: number;
        date: Date;
        paymentMethodId: number;
        categoryId: number;
        subcategoryId: number | null;
        creditCardBillId: number | null;
        installmentId: number | null;
        installmentNumber: number | null;
        transferToMethodId: number | null;
        notes: string | null;
        tags: string | null;
        isRecurring: boolean;
        userId: number;
    }>;
    findAll(userId: number, filters?: {
        type?: string;
        categoryId?: number;
        walletId?: number;
        startDate?: string;
        endDate?: string;
        limit?: number;
        offset?: number;
    }): Promise<{
        id: number;
        createdAt: Date;
        updatedAt: Date;
        type: import("@prisma/client").$Enums.TransactionType;
        description: string;
        amount: number;
        date: Date;
        paymentMethodId: number;
        categoryId: number;
        subcategoryId: number | null;
        creditCardBillId: number | null;
        installmentId: number | null;
        installmentNumber: number | null;
        transferToMethodId: number | null;
        notes: string | null;
        tags: string | null;
        isRecurring: boolean;
        userId: number;
    }[]>;
    findOne(userId: number, id: number): Promise<{
        id: number;
        createdAt: Date;
        updatedAt: Date;
        type: import("@prisma/client").$Enums.TransactionType;
        description: string;
        amount: number;
        date: Date;
        paymentMethodId: number;
        categoryId: number;
        subcategoryId: number | null;
        creditCardBillId: number | null;
        installmentId: number | null;
        installmentNumber: number | null;
        transferToMethodId: number | null;
        notes: string | null;
        tags: string | null;
        isRecurring: boolean;
        userId: number;
    }>;
    update(userId: number, id: number, updateTransactionDto: UpdateTransactionDto): Promise<{
        id: number;
        createdAt: Date;
        updatedAt: Date;
        type: import("@prisma/client").$Enums.TransactionType;
        description: string;
        amount: number;
        date: Date;
        paymentMethodId: number;
        categoryId: number;
        subcategoryId: number | null;
        creditCardBillId: number | null;
        installmentId: number | null;
        installmentNumber: number | null;
        transferToMethodId: number | null;
        notes: string | null;
        tags: string | null;
        isRecurring: boolean;
        userId: number;
    }>;
    remove(userId: number, id: number): Promise<{
        message: string;
    }>;
    getStatistics(userId: number, filters?: {
        startDate?: string;
        endDate?: string;
        categoryId?: number;
        walletId?: number;
    }): Promise<{
        totalIncome: number;
        totalExpense: number;
        balance: number;
        transactionCount: number;
        averageTransaction: number;
    }>;
    getMonthlyReport(userId: number, year: number, month: number): Promise<{
        period: string;
        statistics: {
            totalIncome: number;
            totalExpense: number;
            balance: number;
            transactionCount: number;
            averageTransaction: number;
        };
        transactions: {
            id: number;
            createdAt: Date;
            updatedAt: Date;
            type: import("@prisma/client").$Enums.TransactionType;
            description: string;
            amount: number;
            date: Date;
            paymentMethodId: number;
            categoryId: number;
            subcategoryId: number | null;
            creditCardBillId: number | null;
            installmentId: number | null;
            installmentNumber: number | null;
            transferToMethodId: number | null;
            notes: string | null;
            tags: string | null;
            isRecurring: boolean;
            userId: number;
        }[];
        byCategory: unknown[];
        byWallet: unknown[];
    }>;
}
