import { PrismaService } from '../prisma/prisma.service';
import { CreatePaymentMethodDto } from './dto/create-payment-method.dto';
import { PaymentMethodType } from '@prisma/client';
export declare class PaymentMethodsService {
    private prisma;
    constructor(prisma: PrismaService);
    create(userId: number, createPaymentMethodDto: CreatePaymentMethodDto): Promise<{
        walletGroup: {
            name: string;
            id: number;
            createdAt: Date;
            updatedAt: Date;
            type: import("@prisma/client").$Enums.WalletGroupType;
            description: string | null;
            color: string;
            icon: string;
            isActive: boolean;
            userId: number;
            hasIntegratedPix: boolean;
            hasWalletBalance: boolean;
        } | null;
    } & {
        name: string;
        id: number;
        createdAt: Date;
        updatedAt: Date;
        type: import("@prisma/client").$Enums.PaymentMethodType;
        color: string;
        icon: string;
        creditLimit: number | null;
        closingDay: number | null;
        dueDay: number | null;
        currentBalance: number;
        isActive: boolean;
        userId: number;
        isPrimary: boolean;
        walletGroupId: number | null;
        availableLimit: number | null;
        accountNumber: string | null;
        agency: string | null;
        bankCode: string | null;
    }>;
    findAll(userId: number, walletGroupId?: number): Promise<({
        walletGroup: {
            name: string;
            id: number;
            createdAt: Date;
            updatedAt: Date;
            type: import("@prisma/client").$Enums.WalletGroupType;
            description: string | null;
            color: string;
            icon: string;
            isActive: boolean;
            userId: number;
            hasIntegratedPix: boolean;
            hasWalletBalance: boolean;
        } | null;
    } & {
        name: string;
        id: number;
        createdAt: Date;
        updatedAt: Date;
        type: import("@prisma/client").$Enums.PaymentMethodType;
        color: string;
        icon: string;
        creditLimit: number | null;
        closingDay: number | null;
        dueDay: number | null;
        currentBalance: number;
        isActive: boolean;
        userId: number;
        isPrimary: boolean;
        walletGroupId: number | null;
        availableLimit: number | null;
        accountNumber: string | null;
        agency: string | null;
        bankCode: string | null;
    })[]>;
    findOne(id: number, userId: number): Promise<{
        walletGroup: {
            name: string;
            id: number;
            createdAt: Date;
            updatedAt: Date;
            type: import("@prisma/client").$Enums.WalletGroupType;
            description: string | null;
            color: string;
            icon: string;
            isActive: boolean;
            userId: number;
            hasIntegratedPix: boolean;
            hasWalletBalance: boolean;
        } | null;
        transactions: ({
            category: {
                name: string;
                id: number;
                createdAt: Date;
                updatedAt: Date;
                type: import("@prisma/client").$Enums.CategoryType;
                description: string | null;
                color: string;
                icon: string;
                userId: number;
                monthlyBudget: number | null;
                parentCategoryId: number | null;
            };
        } & {
            id: number;
            createdAt: Date;
            updatedAt: Date;
            type: import("@prisma/client").$Enums.TransactionType;
            description: string;
            amount: number;
            date: Date;
            paymentMethodId: number;
            categoryId: number;
            subcategoryId: number | null;
            creditCardBillId: number | null;
            installmentId: number | null;
            installmentNumber: number | null;
            transferToMethodId: number | null;
            notes: string | null;
            tags: string | null;
            isRecurring: boolean;
            userId: number;
        })[];
    } & {
        name: string;
        id: number;
        createdAt: Date;
        updatedAt: Date;
        type: import("@prisma/client").$Enums.PaymentMethodType;
        color: string;
        icon: string;
        creditLimit: number | null;
        closingDay: number | null;
        dueDay: number | null;
        currentBalance: number;
        isActive: boolean;
        userId: number;
        isPrimary: boolean;
        walletGroupId: number | null;
        availableLimit: number | null;
        accountNumber: string | null;
        agency: string | null;
        bankCode: string | null;
    }>;
    update(id: number, userId: number, updateData: Partial<CreatePaymentMethodDto>): Promise<{
        walletGroup: {
            name: string;
            id: number;
            createdAt: Date;
            updatedAt: Date;
            type: import("@prisma/client").$Enums.WalletGroupType;
            description: string | null;
            color: string;
            icon: string;
            isActive: boolean;
            userId: number;
            hasIntegratedPix: boolean;
            hasWalletBalance: boolean;
        } | null;
    } & {
        name: string;
        id: number;
        createdAt: Date;
        updatedAt: Date;
        type: import("@prisma/client").$Enums.PaymentMethodType;
        color: string;
        icon: string;
        creditLimit: number | null;
        closingDay: number | null;
        dueDay: number | null;
        currentBalance: number;
        isActive: boolean;
        userId: number;
        isPrimary: boolean;
        walletGroupId: number | null;
        availableLimit: number | null;
        accountNumber: string | null;
        agency: string | null;
        bankCode: string | null;
    }>;
    remove(id: number, userId: number): Promise<{
        name: string;
        id: number;
        createdAt: Date;
        updatedAt: Date;
        type: import("@prisma/client").$Enums.PaymentMethodType;
        color: string;
        icon: string;
        creditLimit: number | null;
        closingDay: number | null;
        dueDay: number | null;
        currentBalance: number;
        isActive: boolean;
        userId: number;
        isPrimary: boolean;
        walletGroupId: number | null;
        availableLimit: number | null;
        accountNumber: string | null;
        agency: string | null;
        bankCode: string | null;
    }>;
    updateBalance(id: number, userId: number, amount: number, operation: 'add' | 'subtract'): Promise<{
        name: string;
        id: number;
        createdAt: Date;
        updatedAt: Date;
        type: import("@prisma/client").$Enums.PaymentMethodType;
        color: string;
        icon: string;
        creditLimit: number | null;
        closingDay: number | null;
        dueDay: number | null;
        currentBalance: number;
        isActive: boolean;
        userId: number;
        isPrimary: boolean;
        walletGroupId: number | null;
        availableLimit: number | null;
        accountNumber: string | null;
        agency: string | null;
        bankCode: string | null;
    }>;
    getByType(userId: number, type: PaymentMethodType): Promise<({
        walletGroup: {
            name: string;
            id: number;
            createdAt: Date;
            updatedAt: Date;
            type: import("@prisma/client").$Enums.WalletGroupType;
            description: string | null;
            color: string;
            icon: string;
            isActive: boolean;
            userId: number;
            hasIntegratedPix: boolean;
            hasWalletBalance: boolean;
        } | null;
    } & {
        name: string;
        id: number;
        createdAt: Date;
        updatedAt: Date;
        type: import("@prisma/client").$Enums.PaymentMethodType;
        color: string;
        icon: string;
        creditLimit: number | null;
        closingDay: number | null;
        dueDay: number | null;
        currentBalance: number;
        isActive: boolean;
        userId: number;
        isPrimary: boolean;
        walletGroupId: number | null;
        availableLimit: number | null;
        accountNumber: string | null;
        agency: string | null;
        bankCode: string | null;
    })[]>;
}
